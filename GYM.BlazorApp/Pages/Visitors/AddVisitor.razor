<h3>AddVisitor</h3>
@page "/visitor/add"
@page "/visitor/edit/{visitorId:int}"


@attribute [Authorize]

@inject IGenericService<VisitorViewModel> VisitorsService
@inject NavigationManager NavigationManager
<h1>@Title User</h1>
<hr />
<EditForm Model="@Visitor" OnValidSubmit="SaveVisitor">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="@Visitor!.FirstName" class="form-label">Firstname</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="Visitor.FirstName" />
        </div>
        <ValidationMessage For="@(() => Visitor.FirstName)"/>
    </div>
    <div class="mb-3">
        <label for="@Visitor.LastName" class="form-label">Lastname</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="Visitor.LastName" />
        </div>
        <ValidationMessage For="@(() => Visitor.LastName)" />
    </div>

    <div class="btn-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int VisitorId { get; set; }
    protected string Title = "Add";
    protected VisitorViewModel? Visitor = new();

    protected override async Task OnParametersSetAsync()
    {
        if (VisitorId != 0)
        {
            Title = "Edit";
            Visitor = await VisitorsService.Get("/" + VisitorId);
        }
    }

    private async Task SaveVisitor()
    {
        if (Visitor!.Id != 0)
        {
            await VisitorsService.Update(Visitor);
        }
        else
        {
            await VisitorsService.Create(Visitor);
        }

        Cancel();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/visitors");
    }
}

